definitions:
  domain.Address:
    properties:
      district:
        type: string
      province:
        type: string
      subdistrict:
        type: string
      zipcode:
        type: string
    required:
    - district
    - province
    - subdistrict
    - zipcode
    type: object
  domain.Dorm:
    properties:
      address:
        $ref: '#/definitions/domain.Address'
      bathrooms:
        minimum: 0
        type: integer
      bedrooms:
        minimum: 0
        type: integer
      createAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      ownerId:
        type: string
      price:
        type: number
      rating:
        maximum: 5
        minimum: 0
        type: number
      size:
        type: number
      updateAt:
        type: string
    required:
    - address
    - bathrooms
    - bedrooms
    - name
    - ownerId
    - price
    - size
    type: object
  domain.Lifestyle:
    enum:
    - Active
    - Creative
    - Social
    - Relaxed
    - Football
    - Basketball
    - Tennis
    - Swimming
    - Running
    - Cycling
    - Badminton
    - Yoga
    - Gym & Fitness
    - Music
    - Dancing
    - Photography
    - Painting
    - Gaming
    - Reading
    - Writing
    - DIY & Crafting
    - Cooking
    - Extrovert
    - Introvert
    - Night Owl
    - Early Bird
    - Traveler
    - Backpacker
    - Nature Lover
    - Camping
    - Beach Lover
    - Dog Lover
    - Cat Lover
    - Freelancer
    - Entrepreneur
    - Office Worker
    - Remote Worker
    - Student
    - Self-Employed
    type: string
    x-enum-varnames:
    - Active
    - Creative
    - Social
    - Relaxed
    - Football
    - Basketball
    - Tennis
    - Swimming
    - Running
    - Cycling
    - Badminton
    - Yoga
    - GymAndFitness
    - Music
    - Dancing
    - Photography
    - Painting
    - Gaming
    - Reading
    - Writing
    - DIYAndCrafting
    - Cooking
    - Extrovert
    - Introvert
    - NightOwl
    - EarlyBird
    - Traveler
    - Backpacker
    - NatureLover
    - Camping
    - BeachLover
    - DogLover
    - CatLover
    - Freelancer
    - Entrepreneur
    - OfficeWorker
    - RemoteWorker
    - Student
    - SelfEmployed
  domain.Role:
    enum:
    - ADMIN
    - LESSEE
    - LESSOR
    type: string
    x-enum-varnames:
    - AdminRole
    - LesseeRole
    - LessorRole
  domain.User:
    properties:
      birthDate:
        type: string
      createAt:
        type: string
      email:
        type: string
      filledPersonalInfo:
        type: boolean
      firstname:
        type: string
      gender:
        type: string
      id:
        type: string
      isStudentVerified:
        type: boolean
      isVerified:
        type: boolean
      lastname:
        type: string
      lifestyle1:
        $ref: '#/definitions/domain.Lifestyle'
      lifestyle2:
        $ref: '#/definitions/domain.Lifestyle'
      lifestyle3:
        $ref: '#/definitions/domain.Lifestyle'
      nationalID:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      studentEvidence:
        description: studentEvidence
        type: string
      updateAt:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  dto.DormRequestBody:
    properties:
      address:
        properties:
          district:
            type: string
          province:
            type: string
          subdistrict:
            type: string
          zipcode:
            type: string
        required:
        - district
        - province
        - subdistrict
        - zipcode
        type: object
      bathrooms:
        minimum: 0
        type: integer
      bedrooms:
        minimum: 0
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: number
      size:
        type: number
    required:
    - address
    - bathrooms
    - bedrooms
    - name
    - price
    - size
    type: object
  dto.LoginRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.ResetPasswordCreateRequestBody:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.ResetPasswordRequestBody:
    properties:
      password:
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  dto.TokenWithUserInformationResponseBody:
    properties:
      accessToken:
        type: string
      userInformation:
        $ref: '#/definitions/domain.User'
    type: object
  dto.UserInformationRequestBody:
    properties:
      birthDate:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      lifestyles:
        items:
          $ref: '#/definitions/domain.Lifestyle'
        type: array
      nationalID:
        type: string
      password:
        minLength: 8
        type: string
      studentEvidence:
        type: string
      username:
        type: string
    type: object
  dto.VerifyRequestBody:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  http_response.HttpResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: This is the API for the Condormhub project.
  title: Condormhub API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: user successfully logged in
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.TokenWithUserInformationResponseBody'
              type: object
        "400":
          description: your request is invalid
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: user not found
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: system cannot login user
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: user successfully registered
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.TokenWithUserInformationResponseBody'
              type: object
        "400":
          description: your request is invalid
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: system cannot register user
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Register new user
      tags:
      - auth
  /dorms:
    get:
      description: Retrieve a list of all dorms
      produces:
      - application/json
      responses:
        "200":
          description: All dorms retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Dorm'
                  type: array
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Failed to retrieve dorms
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Get all dorms
      tags:
      - dorms
    post:
      consumes:
      - application/json
      description: Add a new room to the database with the given details
      parameters:
      - description: Dorm information
        in: body
        name: dorm
        required: true
        schema:
          $ref: '#/definitions/dto.DormRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Dorm successfully created
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/domain.Dorm'
              type: object
        "400":
          description: Your request is invalid
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Failed to save dorm
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Create a new dorm
      tags:
      - dorms
  /dorms/{id}:
    delete:
      description: Removes a dorm from the database based on the give ID
      parameters:
      - description: DormID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Dorm successfully deleted
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Incorrect UUID format
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Dorm not found
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Failed to delete dorm
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Delete a dorm
      tags:
      - dorms
    get:
      description: Retrieve a specific dorm based on its ID
      parameters:
      - description: DormID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Dorm data successfully retrieved
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/domain.Dorm'
              type: object
        "400":
          description: Incorrect UUID format
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Dorm not found
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Server failed to retrieve dorm
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Get a dorm by ID
      tags:
      - dorms
    patch:
      consumes:
      - application/json
      description: Modifies an existing room's details based on the given ID
      parameters:
      - description: DormID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Room Data
        in: body
        name: dorm
        required: true
        schema:
          $ref: '#/definitions/dto.DormRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Dorm data updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/domain.Dorm'
              type: object
        "400":
          description: Invalid Request
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Dorm not found
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Server failed to update dorm
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Update an existing dorm
      tags:
      - dorms
  /user:
    patch:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserInformationRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: user successfully updated account information
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/domain.User'
              type: object
        "400":
          description: your request is invalid
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: system cannot update your account information
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Update user information
      tags:
      - user
  /user/:
    delete:
      consumes:
      - application/json
      description: Delete a user account
      produces:
      - application/json
      responses:
        "200":
          description: account successfully deleted
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: cannot parse uuid or cannot delete user
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Delete a user account
      tags:
      - user
  /user/me:
    get:
      consumes:
      - application/json
      description: Get user information
      produces:
      - application/json
      responses:
        "200":
          description: get user information successfully
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/domain.User'
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: system cannot get user information
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Get user information
      tags:
      - user
  /user/newpassword:
    post:
      consumes:
      - application/json
      description: Reset password
      parameters:
      - description: token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: password reset successfully
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.TokenWithUserInformationResponseBody'
              type: object
        "400":
          description: your request is invalid
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: system cannot reset password
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Reset password
      tags:
      - user
  /user/resetpassword:
    post:
      consumes:
      - application/json
      description: Resend verification email
      parameters:
      - description: token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordCreateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: email is sent to user successfully
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: your request is invalid
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: system cannot resend verification email
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Resend verification email
      tags:
      - user
  /user/verify:
    post:
      consumes:
      - application/json
      description: Verify email
      parameters:
      - description: token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: email is verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.TokenWithUserInformationResponseBody'
              type: object
        "400":
          description: your request is invalid
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: your request is unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: system cannot verify your email
          schema:
            allOf:
            - $ref: '#/definitions/http_response.HttpResponse'
            - properties:
                data:
                  type: object
              type: object
      summary: Verify email
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Bearer token authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
