definitions:
  domain.Address:
    properties:
      district:
        type: string
      province:
        type: string
      subdistrict:
        type: string
      zipcode:
        type: string
    required:
    - district
    - province
    - subdistrict
    - zipcode
    type: object
  domain.CheckoutStatus:
    enum:
    - open
    - complete
    - expired
    type: string
    x-enum-varnames:
    - StatusOpen
    - StatusComplete
    - StatusExpired
  domain.Dorm:
    properties:
      address:
        $ref: '#/definitions/domain.Address'
      bathrooms:
        minimum: 0
        type: integer
      bedrooms:
        minimum: 0
        type: integer
      createAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        $ref: '#/definitions/domain.User'
      ownerId:
        type: string
      price:
        type: number
      rating:
        maximum: 5
        minimum: 0
        type: number
      size:
        type: number
      updateAt:
        type: string
    required:
    - address
    - bathrooms
    - bedrooms
    - name
    - ownerId
    - price
    - size
    type: object
  domain.LeasingHistory:
    properties:
      dorm:
        $ref: '#/definitions/domain.Dorm'
      dorm_id:
        type: string
      end:
        type: string
      id:
        type: string
      lessee:
        $ref: '#/definitions/domain.User'
      lessee_id:
        type: string
      orders:
        items:
          $ref: '#/definitions/domain.Order'
        type: array
      start:
        type: string
    type: object
  domain.Lifestyle:
    enum:
    - Active
    - Creative
    - Social
    - Relaxed
    - Football
    - Basketball
    - Tennis
    - Swimming
    - Running
    - Cycling
    - Badminton
    - Yoga
    - Gym & Fitness
    - Music
    - Dancing
    - Photography
    - Painting
    - Gaming
    - Reading
    - Writing
    - DIY & Crafting
    - Cooking
    - Extrovert
    - Introvert
    - Night Owl
    - Early Bird
    - Traveler
    - Backpacker
    - Nature Lover
    - Camping
    - Beach Lover
    - Dog Lover
    - Cat Lover
    - Freelancer
    - Entrepreneur
    - Office Worker
    - Remote Worker
    - Student
    - Self-Employed
    type: string
    x-enum-varnames:
    - Active
    - Creative
    - Social
    - Relaxed
    - Football
    - Basketball
    - Tennis
    - Swimming
    - Running
    - Cycling
    - Badminton
    - Yoga
    - GymAndFitness
    - Music
    - Dancing
    - Photography
    - Painting
    - Gaming
    - Reading
    - Writing
    - DIYAndCrafting
    - Cooking
    - Extrovert
    - Introvert
    - NightOwl
    - EarlyBird
    - Traveler
    - Backpacker
    - NatureLover
    - Camping
    - BeachLover
    - DogLover
    - CatLover
    - Freelancer
    - Entrepreneur
    - OfficeWorker
    - RemoteWorker
    - Student
    - SelfEmployed
  domain.Order:
    properties:
      createAt:
        type: string
      id:
        type: string
      leasingHistory:
        $ref: '#/definitions/domain.LeasingHistory'
      leasingHistoryID:
        type: string
      paidTransaction:
        $ref: '#/definitions/domain.Transaction'
      paidTransactionID:
        type: string
      price:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/domain.Transaction'
        type: array
      type:
        $ref: '#/definitions/domain.OrderType'
      updateAt:
        type: string
    type: object
  domain.OrderType:
    enum:
    - insurance
    - monthly_bill
    type: string
    x-enum-varnames:
    - InsuranceOrderType
    - MonthlyBillOrderType
  domain.Role:
    enum:
    - ADMIN
    - LESSEE
    - LESSOR
    type: string
    x-enum-varnames:
    - AdminRole
    - LesseeRole
    - LessorRole
  domain.Transaction:
    properties:
      createAt:
        type: string
      id:
        type: string
      price:
        type: integer
      status:
        $ref: '#/definitions/domain.CheckoutStatus'
      updateAt:
        type: string
    type: object
  domain.User:
    properties:
      birthDate:
        type: string
      createAt:
        type: string
      email:
        type: string
      filledPersonalInfo:
        type: boolean
      firstname:
        type: string
      gender:
        type: string
      id:
        type: string
      isStudentVerified:
        type: boolean
      isVerified:
        type: boolean
      lastname:
        type: string
      lifestyles:
        items:
          $ref: '#/definitions/domain.Lifestyle'
        type: array
      nationalID:
        type: string
      phoneNumber:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      studentEvidence:
        description: studentEvidence
        type: string
      updateAt:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  dto.CreateTransactionResponseBody:
    properties:
      checkoutUrl:
        type: string
    type: object
  dto.DormRequestBody:
    properties:
      address:
        properties:
          district:
            type: string
          province:
            type: string
          subdistrict:
            type: string
          zipcode:
            type: string
        required:
        - district
        - province
        - subdistrict
        - zipcode
        type: object
      bathrooms:
        minimum: 0
        type: integer
      bedrooms:
        minimum: 0
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: number
      size:
        type: number
    required:
    - address
    - bathrooms
    - bedrooms
    - name
    - price
    - size
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.OrderRequestBody:
    properties:
      leasingHistoryId:
        type: string
    required:
    - leasingHistoryId
    type: object
  dto.OrderResponseBody:
    properties:
      id:
        type: string
      paidTransaction:
        $ref: '#/definitions/domain.Transaction'
      price:
        type: integer
      type:
        $ref: '#/definitions/domain.OrderType'
    type: object
  dto.Pagination:
    properties:
      current_page:
        type: integer
      last_page:
        type: integer
      limit:
        type: integer
      total:
        type: integer
    type: object
  dto.PaginationResponse-domain_Dorm:
    properties:
      data:
        items:
          $ref: '#/definitions/domain.Dorm'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.PaginationResponse-domain_LeasingHistory:
    properties:
      data:
        items:
          $ref: '#/definitions/domain.LeasingHistory'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.PaginationResponse-dto_OrderResponseBody:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.OrderResponseBody'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.RefreshTokenRequestBody:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  dto.RegisterRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.ResetPasswordCreateRequestBody:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.ResetPasswordRequestBody:
    properties:
      password:
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  dto.SuccessResponse-domain_Dorm:
    properties:
      data:
        $ref: '#/definitions/domain.Dorm'
    type: object
  dto.SuccessResponse-domain_LeasingHistory:
    properties:
      data:
        $ref: '#/definitions/domain.LeasingHistory'
    type: object
  dto.SuccessResponse-domain_User:
    properties:
      data:
        $ref: '#/definitions/domain.User'
    type: object
  dto.SuccessResponse-dto_CreateTransactionResponseBody:
    properties:
      data:
        $ref: '#/definitions/dto.CreateTransactionResponseBody'
    type: object
  dto.SuccessResponse-dto_OrderResponseBody:
    properties:
      data:
        $ref: '#/definitions/dto.OrderResponseBody'
    type: object
  dto.SuccessResponse-dto_TokenResponseBody:
    properties:
      data:
        $ref: '#/definitions/dto.TokenResponseBody'
    type: object
  dto.SuccessResponse-dto_TokenWithUserInformationResponseBody:
    properties:
      data:
        $ref: '#/definitions/dto.TokenWithUserInformationResponseBody'
    type: object
  dto.TokenResponseBody:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  dto.TokenWithUserInformationResponseBody:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      userInformation:
        $ref: '#/definitions/domain.User'
    type: object
  dto.TransactionRequestBody:
    properties:
      orderID:
        type: string
    type: object
  dto.UserInformationRequestBody:
    properties:
      birthDate:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      lifestyles:
        items:
          $ref: '#/definitions/domain.Lifestyle'
        type: array
      nationalID:
        type: string
      password:
        minLength: 8
        type: string
      phoneNumber:
        type: string
      studentEvidence:
        type: string
      username:
        type: string
    type: object
  dto.VerifyRequestBody:
    properties:
      token:
        type: string
    required:
    - token
    type: object
info:
  contact: {}
  description: This is the API for the Condormhub project.
  title: Condormhub API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: user successfully logged in
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_TokenWithUserInformationResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: system cannot login user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh user
      parameters:
      - description: user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: user successfully Refresh in
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_TokenResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: system cannot refresh user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: user successfully registered
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_TokenWithUserInformationResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: system cannot register user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /dorms:
    get:
      description: Retrieve a list of all dorms
      parameters:
      - description: Number of dorms to retrieve (default 10, max 50)
        in: query
        name: limit
        type: integer
      - description: Page number to retrieve (default 1)
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: All dorms retrieved successfully
          schema:
            $ref: '#/definitions/dto.PaginationResponse-domain_Dorm'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to retrieve dorms
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all dorms
      tags:
      - dorms
    post:
      consumes:
      - application/json
      description: Add a new room to the database with the given details
      parameters:
      - description: Dorm information
        in: body
        name: dorm
        required: true
        schema:
          $ref: '#/definitions/dto.DormRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Dorm successfully created
          schema:
            $ref: '#/definitions/dto.SuccessResponse-domain_Dorm'
        "400":
          description: Your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: You do not have permission to create a dorm
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to save dorm
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new dorm
      tags:
      - dorms
  /dorms/{id}:
    delete:
      description: Removes a dorm from the database based on the give ID
      parameters:
      - description: DormID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Dorm successfully deleted
        "400":
          description: Incorrect UUID format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: You do not have permission to delete this dorm
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Dorm not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete dorm
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a dorm
      tags:
      - dorms
    get:
      description: Retrieve a specific dorm based on its ID
      parameters:
      - description: DormID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Dorm data successfully retrieved
          schema:
            $ref: '#/definitions/dto.SuccessResponse-domain_Dorm'
        "400":
          description: Incorrect UUID format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Dorm not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Server failed to retrieve dorm
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a dorm by ID
      tags:
      - dorms
    patch:
      consumes:
      - application/json
      description: Modifies an existing room's details based on the given ID
      parameters:
      - description: DormID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Room Data
        in: body
        name: dorm
        required: true
        schema:
          $ref: '#/definitions/dto.DormRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Dorm data updated successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse-domain_Dorm'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: unauthorized to update this dorm
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Dorm not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Server failed to update dorm
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing dorm
      tags:
      - dorms
  /history/{id}:
    delete:
      description: Delete a leasing history in the database
      parameters:
      - description: LeasingHistoryId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Incorrect UUID format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Can not parse UUID or Failed to delete leasing history
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a leasing history
      tags:
      - history
    patch:
      description: Delete a leasing history in the database
      parameters:
      - description: LeasingHistoryId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Set end timestamp successfully
        "400":
          description: Incorrect UUID format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Can not parse UUID or Failed to update leasing history
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a leasing history
      tags:
      - history
    post:
      description: Add a new leasing history to the database
      parameters:
      - description: DormID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Dorm successfully created
          schema:
            $ref: '#/definitions/dto.SuccessResponse-domain_LeasingHistory'
        "400":
          description: Incorrect UUID format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Dorm not found or leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Can not parse UUID or failed to save leasing history to database
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new leasing history
      tags:
      - history
  /history/bydorm/{id}:
    get:
      description: Retrieve a list of all leasing history by userid
      parameters:
      - description: DormID
        in: path
        name: id
        required: true
        type: string
      - description: Number of history to be retirved
        in: query
        name: limit
        required: true
        type: string
      - description: Page to retrive
        in: query
        name: page
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Retrive history successfully
          schema:
            $ref: '#/definitions/dto.PaginationResponse-domain_LeasingHistory'
        "400":
          description: Incorrect UUID format or limit parameter is incorrect or page
            parameter is incorrect or page exceeded
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Can not parse UUID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all leasing history by userid
      tags:
      - history
  /history/me:
    get:
      description: Retrieve a list of all leasing history by userid
      parameters:
      - description: Number of history to be retirved
        in: query
        name: limit
        required: true
        type: string
      - description: Page to retrive
        in: query
        name: page
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Retrive history successfully
          schema:
            $ref: '#/definitions/dto.PaginationResponse-domain_LeasingHistory'
        "400":
          description: Incorrect UUID format or limit parameter is incorrect or page
            parameter is incorrect or page exceeded
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all leasing history by userid
      tags:
      - history
  /order:
    post:
      consumes:
      - application/json
      description: Create an order
      parameters:
      - description: Order request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.OrderRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Order created successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_OrderResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: cannot parse uuid or cannot delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Create an order
      tags:
      - order
  /order/{id}:
    get:
      consumes:
      - application/json
      description: Get an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_OrderResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: cannot parse uuid or cannot delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Get an order by ID
      tags:
      - order
  /order/unpaid/{userID}:
    get:
      consumes:
      - application/json
      description: Get unpaid orders by User ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Number of history to be retrieved
        in: query
        name: limit
        required: true
        type: string
      - description: Page to retrieved
        in: query
        name: page
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/dto.PaginationResponse-dto_OrderResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: cannot parse uuid or cannot delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Get unpaid orders by User ID
      tags:
      - order
  /order/unpaid/me:
    get:
      consumes:
      - application/json
      description: Get my unpaid orders by ID
      parameters:
      - description: Number of history to be retrieved
        in: query
        name: limit
        required: true
        type: string
      - description: Page to retrieved
        in: query
        name: page
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Unpaid orders retrieved successfully
          schema:
            $ref: '#/definitions/dto.PaginationResponse-dto_OrderResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: cannot parse uuid or cannot delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Get my unpaid orders by ID
      tags:
      - order
  /transaction:
    post:
      consumes:
      - application/json
      description: Create a transaction
      parameters:
      - description: Transaction request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Transaction created successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_CreateTransactionResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: leasing history not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: cannot parse uuid or cannot delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a transaction
      tags:
      - transaction
  /user:
    patch:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserInformationRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: user successfully updated account information
          schema:
            $ref: '#/definitions/dto.SuccessResponse-domain_User'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: system cannot update your account information
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user information
      tags:
      - user
  /user/:
    delete:
      consumes:
      - application/json
      description: Delete a user account
      produces:
      - application/json
      responses:
        "204":
          description: account successfully deleted
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: cannot parse uuid or cannot delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a user account
      tags:
      - user
  /user/me:
    get:
      description: Get user information
      produces:
      - application/json
      responses:
        "200":
          description: get user information successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse-domain_User'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: system cannot get user information
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - Bearer: []
      summary: Get user information
      tags:
      - user
  /user/newpassword:
    post:
      consumes:
      - application/json
      description: Reset password
      parameters:
      - description: token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: password reset successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_TokenWithUserInformationResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: system cannot reset password
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Reset password
      tags:
      - user
  /user/resetpassword:
    post:
      consumes:
      - application/json
      description: Resend verification email
      parameters:
      - description: token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordCreateRequestBody'
      produces:
      - application/json
      responses:
        "204":
          description: email is sent to user successfully
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: system cannot resend verification email
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Resend verification email
      tags:
      - user
  /user/verify:
    post:
      consumes:
      - application/json
      description: Verify email
      parameters:
      - description: token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: email is verified successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_TokenWithUserInformationResponseBody'
        "400":
          description: your request is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: your request is unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: system cannot verify your email
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Verify email
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Bearer token authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
